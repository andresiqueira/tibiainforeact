{"version":3,"sources":["Components/Input/index.tsx","Components/Button/index.tsx","Hooks/useFetch.ts","Components/Form/index.tsx","Components/Image/index.tsx","Components/Card/index.tsx","Components/Errors/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Input","_ref","label","register","rest","Object","objectWithoutProperties","react_default","a","createElement","Fragment","className","assign","Button","children","useFetch","url","_useState","useState","_useState2","slicedToArray","responseData","setResponseData","_useState3","_useState4","responseError","setResponseError","fetchData","asyncToGenerator","regenerator_default","mark","_callee","inputData","wrap","_context","prev","next","axios","get","then","res","data","characters","character","name","catch","err","console","log","stop","_x","apply","this","arguments","schema","yup","matches","required","Form","error","isLoadin","setIsLoading","_useForm","useForm","resolver","yupResolver","handleSubmit","reset","errors","formState","_useFetch","process","useEffect","message","onSubmit","characterData","setTimeout","Components_Input","Components_Button","iconify","style","width","height","top","position","icon","Image","esm_extends","Card","isOpen","setIsOpen","level","vocation","sex","residence","world","onClick","color","background","borderRadius","Errors","App","setError","setCharacterData","document","title","Components_Image","src","alt","Components_Form","Components_Errors","Components_Card","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.9e1163b8.chunk.js","sourcesContent":["import React, { InputHTMLAttributes } from 'react';\nimport type {  FieldValues, UseFormRegister } from 'react-hook-form';\nimport './Style.css';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement>{\n    label: string;\n    register: UseFormRegister<FieldValues>;\n}\n\nconst Input = ({label, register,  ...rest}: InputProps) => {\n    return (\n        <>\n            <label className='label'>{label}</label>\n            <input className='input' {...register(label)} {...rest}/>\n        </>\n    )\n}\n\nexport default Input;","import React, { ButtonHTMLAttributes } from 'react';\nimport './Style.css'\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    children: string;\n}\n\nconst Button= ({children, ...rest}: ButtonProps) => {\n    return (\n        <button className='button' {...rest}> {children} </button>\n    )\n}\n\nexport default Button;","import { useState } from \"react\";\nimport axios from 'axios';\n\nexport interface IChacarterShape {\n  characters: {\n    character: {\n      name: string,\n      level: string,\n      vocation: string,\n      sex: string,\n      residence: string,\n      world: string\n    }\n  }\n}\n\nexport interface IApiShape {\n  data: IChacarterShape\n}\n\nconst useFetch = (url: string) => {\n  const [responseData, setResponseData] = useState<IApiShape | null>(null);\n  const [responseError, setResponseError] = useState<string | null>(null);\n\n  const fetchData = async (inputData: string) => {\n    if (url) {\n      inputData && axios.get(url + inputData )\n      .then((res) => {\n        if (res.data.characters.character.name === '') {\n          setResponseError('Personagem não existe');\n          return\n        }\n\n        setResponseData(res);\n      })\n      .catch((err) => console.log(err));\n    }\n  }\n\n  return { responseData, fetchData, responseError }\n}\n\nexport default useFetch","import React, { useEffect, useState } from 'react';\n\nimport { Icon } from '@iconify/react'\nimport { useForm, SubmitHandler, FieldValues } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from \"yup\";\n\nimport Input from '../Input';\nimport Button from '../Button';\nimport useFetch from '../../Hooks/useFetch';\nimport './Style.css';\n\nconst schema = yup.object({\n    name: yup.string()\n        .matches(/^[a-zA-Z\\s]*$/, \"É permitido somente letras\")\n        .required('Entre com um nome de personagem')\n}).required()\n\nconst Form = ({ data, error }: any) => {\n    const [isLoadin, setIsLoading] = useState<boolean>(false);\n\n    const { register, handleSubmit, reset, formState: { errors } } = useForm<FieldValues>({\n        resolver: yupResolver(schema)\n    });\n    const { responseData, fetchData, responseError } = useFetch(process.env.REACT_APP_API_URL!)\n\n    useEffect(() => {\n        data(responseData)\n    }, [responseData])\n\n    useEffect(() => {\n        error(responseError)\n    }, [responseError])\n\n    useEffect(() => {\n        if (errors.name) {\n            error(errors.name.message)\n        }\n    }, [errors.name])\n\n    const onSubmit: SubmitHandler<FieldValues> = characterData => {\n        setIsLoading(true)\n        setTimeout(() => { \n            fetchData(characterData.name)\n            setIsLoading(false) \n        }, 1500)\n        reset()\n    }\n\n    return (\n        <>\n            <form className='form' onSubmit={handleSubmit(onSubmit)}>\n                <Input\n                    label=\"name\"\n                    register={register}\n                />\n                <Button>Procurar</Button>\n                {isLoadin && <Icon style={{ width: \"30px\", height: \"30px\", top: \"200px\", position: \"absolute\" }} icon=\"eos-icons:loading\" />}\n            </form>\n        </>\n    )\n}\n\nexport default Form;","import React, {ImgHTMLAttributes} from 'react';\n\ninterface ImageProps extends ImgHTMLAttributes<HTMLImageElement>{\n    src: string;\n    alt: string;\n}\n\nconst Image = ({...rest}:ImageProps) => {\n    return (\n        <img {...rest}/>\n    )\n}\n\nexport default Image;","import React, { useEffect, useState } from 'react';\nimport { Icon } from '@iconify/react'\nimport './Style.css';\ninterface DataGridProps {\n    data: {\n        name?: string\n        level?: string\n        vocation?: string\n        sex?: string\n        world?: string\n        residence?: string\n    }\n}\n\nconst Card = ({ data }: DataGridProps) => {\n    const [isOpen, setIsOpen] = useState<boolean>(false)\n\n    const { name, level, vocation, sex, residence, world } = data;\n\n    useEffect(() => {\n        if(data) {\n            setIsOpen(true)\n        }\n    }, [data])\n    \n    if (!isOpen) {\n        return null\n    }\n\n    return (\n        <div className='datagrid'>\n            <ul>\n                <li>\n                    Nome: {name}\n                </li>\n                <li>\n                    Level: {level}\n                </li>\n                <li>\n                    Vocação: {vocation}\n                </li>\n                <li>\n                    Sexo: {sex === 'male' ? 'Masculino' : 'Feminino'}\n                </li>\n                <li>\n                    Residência: {residence}\n                </li>\n                <li>\n                    Mundo: {world}\n                </li>\n            </ul>\n            <button className='close-button' onClick={() => setIsOpen(false)}><Icon width={50} height={50} style={{color: \"#cda00e\", background: \"#e1e1e1\", borderRadius: \"100%\"}} icon=\"carbon:close-filled\" /></button>\n\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport './Style.css'\n\ninterface ErrorsProps {\n    children: string;\n}\n\nconst Errors = ({children}: ErrorsProps) => {\n    return (\n        <span className='error'>{children}</span>\n    )\n}\n\nexport default Errors;","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nimport Form from './Components/Form';\nimport Image from './Components/Image';\nimport Card from './Components/Card';\nimport Errors from './Components/Errors';\n\nconst App = () => {\n  const [error, setError] = useState<string | null>(null);\n  const [characterData, setCharacterData] = useState<any>(null);\n\n  document.title = \"Tibia Info\";\n\n  const logo: string = 'tibia.gif';\n  console.log('dados da api :', characterData)\n  console.log('erro da api :', error)\n\n  useEffect(() => {\n    if (error) {\n      setCharacterData(null)\n      setTimeout(() => {\n        setError(null)\n      }, 3000)\n    }\n  }, [error])\n\n  return (\n    <div className='App'>\n      <Image src={logo} alt='Logo Tibia' width={200} height={150} />\n      <h1>Tibia Character Information</h1>\n      <Form data={setCharacterData} error={setError} />\n      {error && (\n        <Errors>{error}</Errors>\n      )}\n      {characterData && <Card data={characterData.data.characters.character} />}\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}